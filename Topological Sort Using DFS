#include <iostream>
#include <unordered_map>
#include <list>
#include <queue>
#include <stack>
using namespace std;


class Graph{
    public:
    unordered_map<int,list<int>> adj;

    void addEdge(int u,int v,bool direction){
      // 0->undirected
      // 1-> dirrected

      adj[u].push_back(v);
      if(direction==0){
        adj[v].push_back(u);
      }
    }

    void printAdjList(){
      for(auto node:adj){
        cout<<node.first<<"->";
        for(auto nbr:node.second){
          cout<<nbr<<", ";
        }
        cout<<endl;
      }
    }

    void topoSortDFS(int src,unordered_map<int,bool> &vis,stack<int> &ans){
      vis[src] = true;
      for(auto nbr:adj[src]){
        if(!vis[nbr]){
          topoSortDFS(nbr,vis,ans);
        }
      }
      ans.push(src);
    }
    


    
};
int main() {
  
  


  Graph g1;
  int m = 8;
  g1.addEdge(0,1,1);
  g1.addEdge(1,2,1);
  g1.addEdge(2,3,1);
  g1.addEdge(3,4,1);
  g1.addEdge(3,5,1);
  g1.addEdge(5,6,1);
  g1.addEdge(4,6,1);
  g1.addEdge(6,7,1);


  unordered_map<int,bool> vis;
  stack<int> ans;

  for(int i=0;i<m;i++){
    if(!vis[i]){
      g1.topoSortDFS(i,vis,ans);
    }
  }

  cout<<"Printing Toposort Using DFS: ";
  while(!ans.empty()){
    cout<<ans.top()<<" ";
    ans.pop();
  }
  cout<<endl;
  


  return 0;
}
