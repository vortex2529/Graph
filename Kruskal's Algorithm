// User function Template for C++
class DisjointSet{
    vector<int> rank,parent,size;
    public:
    DisjointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=i;
        }
    }
    
    int findpar(int node){
        if(node == parent[node])
            return node;
        return parent[node] = findpar(parent[node]);    
    }
    
    void unoinByRank(int u,int v){
        int pu = findpar(u);
        int pv = findpar(v);
        
        if(pu == pv) return;
        
        if(rank[pu] < rank[pv]){
            parent[pu] = pv;
        }
        else if(rank[pv] < rank[pu]){
            parent[pv] = pu;
        }
        else{
            parent[pv] = pu;
            rank[pu]++;
        }
    }
    
    void unionBySize(int u,int v){
        int pu = findpar(u);
        int pv = findpar(v);
        
        if(pu == pv) return;
        
        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pv] += size[pu]; 
        }
        else{
            parent[pv] = pu;
            size[pu] += size[pv];
        }
    }
};
class Solution {
  public:
    int kruskalsMST(int V, vector<vector<int>> &adj) {
        
        // E+V
        vector<pair<int,pair<int,int>>> edges;
        for(auto it:adj){
            edges.push_back({it[2],{it[0],it[1]}});
        }
        
        // MlogM
        sort(edges.begin(),edges.end());
        
        DisjointSet ds(V);
        
        int mstWt = 0;
        
        // M x 4 x alpha
        for(auto it:edges){
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;
            
            
            if(ds.findpar(u) != ds.findpar(v)){
                mstWt += wt;
                ds.unionBySize(u,v);
            }
        }
        
        return mstWt;
        
    }
};
