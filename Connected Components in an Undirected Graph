
class Solution {
  public:
  
    void dfs(int src,vector<int> &temp,vector<bool> &vis,vector<int> adj[]){
        temp.push_back(src);
        vis[src] = true;
        
        for(auto nbr:adj[src]){
            if(!vis[nbr]){
                dfs(nbr,temp,vis,adj);
            }
        }
    }
    vector<vector<int>> getComponents(int n, vector<vector<int>>& edges) {
        
        vector<int> adj[n];
        
        for(auto e:edges){
            int u = e[0];
            int v = e[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        
        
        vector<vector<int>> ans;
        vector<bool> vis(n,false);
        
        for(int i=0;i<n;i++){
            vector<int> temp;
            if(!vis[i]){
                dfs(i,temp,vis,adj);
                ans.push_back(temp);
            }
        }
        
        return ans;
        
        
    }
};
