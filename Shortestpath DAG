#include <iostream>
#include <unordered_map>
#include <vector>
#include <list>
#include <stack>
#include <limits.h>
using namespace std;

class Graph{
    public:
      unordered_map<int,list<pair<int,int>>> adj;
      // 0->directed
      // 1->undirected
      void addEdge(int u,int v,int wt,bool dir){
        adj[u].push_back({v,wt});
        if(dir == 1){
          adj[v].push_back({u,wt});
        }
      }

      void printAdjList(){
        cout<<"Printing Adjacenecy List :"<<endl;
        for(auto i:adj){
          cout<<i.first<<"->";
          for(auto j:i.second){
            cout<<"("<<j.first<<", "<<j.second<<"), ";
          }
          cout<<endl;
        }
        cout<<endl;
      }

      void topoSortDfs(int src,unordered_map<int,bool> &vis,stack<int> &st){
        vis[src] = true;
        for(auto nbr:adj[src]){
          if(!vis[nbr.first]){
            topoSortDfs(nbr.first,vis,st);
          }
        }
        st.push(src);
      }

      void shortestPathDfs(int src,stack<int>& topoOrder,int n){
        vector<int> dist(n,INT_MAX);
        dist[src] = 0;
        while(!topoOrder.empty()){
            int topElement = topoOrder.top();
            topoOrder.pop();

            if(dist[topElement] != INT_MAX){
              for(auto nbr:adj[topElement]){
                if(dist[topElement] + nbr.second < dist[nbr.first]){
                  dist[nbr.first] = dist[topElement] + nbr.second; 
                }
              }
            }
        }

        cout<<"shortest distance from src: "<<src<<" to every node :"<<endl;
        for(int i=0;i<n;i++){
          cout<<i<<"->"<<dist[i]<<endl;
        }
      }
};
int main() {
  Graph g1;

  g1.addEdge(0,1,5,0);
  g1.addEdge(0,2,3,0);
  g1.addEdge(2,1,2,0);
  g1.addEdge(2,3,5,0);
  g1.addEdge(2,4,6,0);
  g1.addEdge(1,3,3,0);
  g1.addEdge(4,3,1,0);
  g1.printAdjList();

  unordered_map<int,bool> vis;
  stack<int> topoOrder;
  int src = 0;
  g1.topoSortDfs(src,vis,topoOrder);

  int n = 5;
  int dest = 3;
  
  g1.shortestPathDfs(src,topoOrder,n);

  

  return 0;
}
