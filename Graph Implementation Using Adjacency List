#include <iostream>
#include <unordered_map>
#include <list>
using namespace std;

class Graph{
    public:
    unordered_map<int,list<int>> adjList;

    void addEdge(int u,int v,bool direction){
      // direction = 0 -> undirected
      // direction = 1 -> directed

      adjList[u].push_back(v);

      if(direction == 0){
        adjList[v].push_back(u);

      }

    }

    void printAdjList(){
      cout<<"Printing Adjacency List: "<<endl;
      for(auto node:adjList){
        cout<<node.first<<"-> ";
        for(auto nbr:node.second){
          cout<<nbr<<",";
        }
        cout<<endl;
      }
    }
};

int main() {
  
  cout<< "In case of undirected graph"<<endl; 
  Graph g;
  g.addEdge(0,1,0);
  g.addEdge(1,2,0);
  g.addEdge(0,2,0);

  g.printAdjList();

  cout<<"In case of directed graph"<<endl; 
  Graph g1;
  g1.addEdge(0,1,1);
  g1.addEdge(1,2,1);
  g1.addEdge(0,2,1);

  g1.printAdjList();

  return 0;

}




/////// using template \\\\\\\\\\\\


#include <iostream>
#include <unordered_map>
#include <list>
using namespace std;
template <typename T>


class Graph{
    public:
    unordered_map<T,list<T>> adjList;

    void addEdge(T u,T v,bool direction){
      // direction = 0 -> undirected
      // direction = 1 -> directed

      adjList[u].push_back(v);

      if(direction == 0){
        adjList[v].push_back(u);

      }

    }

    void printAdjList(){
      cout<<"Printing Adjacency List: "<<endl;
      for(auto node:adjList){
        cout<<node.first<<"-> ";
        for(auto nbr:node.second){
          cout<<nbr<<",";
        }
        cout<<endl;
      }
    }
};

int main() {
  cout<< "In case of undirected graph"<<endl; 
  Graph<int> g;
  g.addEdge(0,1,0);
  g.addEdge(1,2,0);
  g.addEdge(0,2,0);

  g.printAdjList();

  cout<<"In case of directed graph"<<endl; 
  Graph<int> g1;
  g1.addEdge(0,1,1);
  g1.addEdge(1,2,1);
  g1.addEdge(0,2,1);

  g1.printAdjList();

  return 0;

}
