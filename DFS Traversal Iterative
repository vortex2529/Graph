#include <iostream>
#include <vector>
#include <stack>
using namespace std;

void dfs_iterative(int start, vector<int> adj[], int n) {
    vector<int> visited(n+1, 0);
    stack<int> st;

    st.push(start);

    cout << "DFS Traversal (Iterative): ";
    while(!st.empty()) {
        int node = st.top();
        st.pop();

        if(!visited[node]) {
            cout << node << " ";
            visited[node] = 1;
        }

        // Push neighbors in reverse order 
        // so that smaller-numbered nodes are processed first (like recursion)
        for(auto it = adj[node].rbegin(); it != adj[node].rend(); it++) {
            if(!visited[*it]) {
                st.push(*it);
            }
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;  // n = vertices, m = edges

    vector<int> adj[n+1];
    for(int i=0; i<m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u); // undirected
    }

    dfs_iterative(1, adj, n); // start from node 1
}
