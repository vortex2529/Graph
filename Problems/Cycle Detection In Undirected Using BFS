class Solution {
  public:
    bool hasCycle(int src,vector<bool>&vis,vector<int> adj[]){
        unordered_map<int,int> parent;
        queue<int>q;
        q.push(src);
        parent[src] = -1;
        vis[src] = true;
        while(!q.empty()){
            int fNode = q.front();
            q.pop();
            
            for(auto nbr:adj[fNode]){
                if(!vis[nbr]){
                    q.push(nbr);
                    parent[nbr] = fNode;
                    vis[nbr] = true;
                }
                else{
                    if(nbr != parent[fNode]){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    bool isCycle(int n, vector<vector<int>>& edges) {
    
        vector<int> adj[n];


        for(auto e:edges){
            int u = e[0];
            int v = e[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        bool ans = false;
        vector<bool> vis(n,false);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                ans = hasCycle(i,vis,adj);
                if(ans==true) break;
            }
        }
        return ans;
        
    }
};
