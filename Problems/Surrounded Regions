class Solution {
public:
    void bfs(vector<vector<char>>& board,vector<vector<int>>& vis,int r,int c){
        int n = board.size();
        int m = board[0].size();
        queue<pair<int,int>>q;
        q.push({r,c});
        vis[r][c] = 1;
        int dr[] = {-1,0,1,0};
        int dc[] = {0,1,0,-1};
        while(!q.empty()){
            auto front = q.front();q.pop();
            int nr = front.first;
            int nc = front.second;
            board[nr][nc] = '#';

            for(int i=0;i<4;i++){
                int nrow = nr + dr[i];
                int ncol = nc + dc[i];
                if(nrow>= 0 && nrow<n && ncol>= 0 && ncol < m && vis[nrow][ncol] != 1 && board[nrow][ncol] == 'O'){
                    q.push({nrow,ncol});
                    vis[nrow][ncol] = 1;
                }
            }
        }
    }
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>> vis(n,vector<int> (m,0)); 
        
        for(int i=0;i<n;i++){
            if(board[i][0] == 'O' && vis[i][0] == 0) bfs(board,vis,i,0);
            if(board[i][m-1] == 'O' && vis[i][m-1] == 0) bfs(board,vis,i,m-1);
        } 
        for(int j=0;j<m;j++){
            if(board[0][j] == 'O' && vis[0][j] == 0) bfs(board,vis,0,j);
            if(board[n-1][j] == 'O' && vis[n-1][j] == 0) bfs(board,vis,n-1,j);
        }    

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j] == 'O') board[i][j] = 'X';
                else if(board[i][j] == '#') board[i][j] = 'O';
            }
        }
        
        
    }
};
