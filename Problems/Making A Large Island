// User function Template for C++
class DSU{

public:
    vector<int> size,parent;
    DSU(int n){
        size.resize(n+1);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
            size[i] = 1;
        }
    }

    int find(int node){
        if(node == parent[node]){
            return node;
        }
        return parent[node] = find(parent[node]);
    }    

    void unionBySize(int u,int v){
        int pu = find(u);
        int pv = find(v);

        if(pu == pv) return;

        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pv] += size[pu];
        }
        else{
            parent[pv] = pu;
            size[pu] += size[pv];

        }
    }
};
class Solution {
  private:
    bool isvalid(int nr,int nc,int n){
        return nr>=0 && nr<n && nc>=0 && nc<n;
    }
  public:
    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        
        int dr[] = {-1,0,1,0};
        int dc[] = {0,1,0,-1};
        
        DSU ds(n*n);
        
        for(int r=0;r<n;r++){
            for(int c=0;c<n;c++){
                if(grid[r][c] == 0) continue;
                
                for(int i=0;i<4;i++){
                    int nr = r + dr[i];
                    int nc = c + dc[i];
                    
                    if(isvalid(nr,nc,n) && grid[nr][nc] == 1){
                        int nodeNo = r*n+c;
                        int adjNodeNo = nr*n+nc;
                        
                        ds.unionBySize(nodeNo,adjNodeNo);
                    }
                }
            }
        }
        
        int mx = 0;
        for(int r=0;r<n;r++){
            for(int c=0;c<n;c++){
                if(grid[r][c] == 1) continue;
                
                set<int> components;
                for(int i=0;i<4;i++){
                    int nr = r + dr[i];
                    int nc = c + dc[i];
                    
                    if(isvalid(nr,nc,n)){
                        if(grid[nr][nc] == 1){
                            components.insert(ds.find(nr*n+nc));
                        }
                    }
                }
                
                int totalSize = 0;
                for(auto it:components){
                    totalSize += ds.size[it];
                }
                mx = max(mx,totalSize+1);
            }
        }
        
        for(int cell=0;cell<n*n;cell++){
            mx = max(mx,ds.size[ds.find(cell)]);
        }
        
        return mx;
    }
};
