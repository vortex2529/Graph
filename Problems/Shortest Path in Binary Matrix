class Solution {
#define P pair<int,pair<int,int>>       
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>>dist (n,vector<int>(n,1e9));
        
        queue<P> q;
        dist[0][0] = 1;
        q.push({1,{0,0}});
        
        int dx[] = {-1,-1,0,1,1,1,0,-1};
        int dy[] = {0,1,1,1,0,-1,-1,-1};
        
        if(grid[0][0] == 1) return -1;
        if(n==1 && grid[0][0] == 0) return 1;
        
        
        while(!q.empty()){
            auto top = q.front();
            int dis = top.first;
            int x = top.second.first;
            int y = top.second.second;
            q.pop();
            
            for(int i=0;i<8;i++){
                int nx = x + dx[i];
                int ny = y + dy[i];
                
                if(nx >=0 && nx <n && ny>=0 && ny <n && dis+1 < dist[nx][ny] && grid[nx][ny]==0){
                    dist[nx][ny] = dis+1 ;
                    if(nx == n-1 && ny == n-1) return dis+1;
                    q.push({dis+1,{nx,ny}});
                }
            }
        }
        
        
        return -1;
    }
};
