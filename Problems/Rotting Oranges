class Solution {
public:
    
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        queue<pair<pair<int,int>,int>>q;
        vector<vector<int>> vis(n, vector<int>(m, 0));

        int freshcnt = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2){
                    q.push({{i,j},0});
                    vis[i][j]=2;
                }
                if(grid[i][j] == 1) {
                    freshcnt++;
                }
            }
        }

        int time = 0;
        int dr[] = {-1,0,1,0};
        int dc[] = {0,1,0,-1};

        int cnt = 0;
        while(!q.empty()){
            auto front = q.front();q.pop();
            int r = front.first.first;
            int c = front.first.second;
            int t = front.second;
            time = max(time,t);
            for(int i=0;i<4;i++){
                int nrow = r + dr[i];
                int ncol = c + dc[i];

                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol] == 1 && vis[nrow][ncol] != 2){
                    q.push({{nrow,ncol},t+1});
                    vis[nrow][ncol] = 2;
                    cnt++;
                }
            }
        }

        if(freshcnt != cnt) return -1;

        return time;


       
    }
};
