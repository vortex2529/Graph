class DSU{

public:
    vector<int> size,parent;
    DSU(int n){
        size.resize(n+1,0);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }

    int find(int node){
        if(node == parent[node]){
            return node;
        }
        return parent[node] = find(parent[node]);
    }    

    void unionBySize(int u,int v){
        int pu = find(u);
        int pv = find(v);

        if(pu == pv) return;

        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pv] += size[pu];
        }
        else{
            parent[pv] = pu;
            size[pu] += pv;

        }
    }
};

class Solution {
  public:
    int maxRemove(vector<vector<int>>& stones, int n) {
        int maxrow = 0;
        int maxcol = 0;
        
        for(auto it:stones){
            maxrow = max(maxrow,it[0]);
            maxcol = max(maxcol,it[1]);
        }
        
        DSU ds(maxrow+maxcol+1);
        unordered_map<int,int> stoneNodes;
        
        for(auto it:stones){
            int nodeRow = it[0];
            int nodeCol = it[1] + maxrow + 1;
            ds.unionBySize(nodeRow,nodeCol);
            stoneNodes[nodeRow] = 1;
            stoneNodes[nodeCol] = 1;
        }
        
        int cnt = 0;
        
        for(auto it:stoneNodes){
            if(ds.find(it.first) == it.first) cnt++;
        }
        
        return n-cnt;
        
        
        
        
    }
};
