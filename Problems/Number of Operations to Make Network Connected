class DSU{

public:
    vector<int> size,parent;
    DSU(int n){
        size.resize(n+1,0);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }

    int find(int node){
        if(node == parent[node]){
            return node;
        }
        return parent[node] = find(parent[node]);
    }    

    void unionBySize(int u,int v){
        int pu = find(u);
        int pv = find(v);

        if(pu == pv) return;

        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pv] += size[pu];
        }
        else{
            parent[pv] = pu;
            size[pu] += pv;

        }
    }
};

class Solution {    
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
      
        DSU ds(n);
        int extra = 0;
        for(auto it:connections){
            int u = it[0];
            int v = it[1];

            if(ds.find(u) != ds.find(v)){
                ds.unionBySize(u,v);
            }
            else{

                extra++;
            }
        }

        int nc = 0;
        for(int i=0;i<n;i++){
            if(ds.parent[i] == i) nc++;
        }

        int ans = nc-1;

        return extra>=ans?ans:-1;


       
    }
};
