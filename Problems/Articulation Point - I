// User function Template for C++

class Solution {
  private:
  
    int timer = 0;
    void dfs(int node,int parent,vector<int>&vis,vector<int>adj[],int tin[],int low[],vector<int> &marks){
        vis[node] = 1;
        tin[node] = low[node] = timer;
        timer++;
        int child = 0;
        for(auto it:adj[node]){
            if(it == parent) continue;
            if(vis[it] == 0){
                dfs(it,node,vis,adj,tin,low,marks);
                
                low[node] = min(low[node],low[it]);

                if(low[it] >= tin[node] && parent != -1){
                    marks[node] = 1;
                }
                child++;
            }
            else{
                low[node] = min(low[node],tin[it]); 
            }
        }
        
        if(child > 1 && parent == -1) marks[node] = 1;
    }
  public:
    vector<int> articulationPoints(int V, vector<int> adj[]) {
       vector<int> vis(V,0);
       int tin[V];
       int low[V];
       vector<int> marks(V,0);
       vector<int> ans;
       for(int i=0;i<V;i++){
           if(vis[i] == 0){
               dfs(i,-1,vis,adj,tin,low,marks);
           }
       }
       for(int i=0;i<V;i++) if(marks[i] == 1) ans.push_back(i);
       
       if(ans.size() == 0) return {-1};    
       return ans;
       
    }
};
