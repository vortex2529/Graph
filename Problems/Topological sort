class Solution {
  private:
    void toposortBFS(int n,vector<int>&ans,vector<int> adj[]){
        vector<int> indegree(n,0);
        
        
        for(int src=0;src<n;src++){
            for(auto nbr:adj[src]) indegree[nbr]++;
        }
        queue<int> q;
        for(int i=0;i<n;i++){
            if(indegree[i] == 0) q.push(i);
        }
        
        
        while(!q.empty()){
            int fNode = q.front();q.pop();
            ans.push_back(fNode);
            for(auto nbr:adj[fNode]){
                indegree[nbr]--;
                if(indegree[nbr] == 0){
                    q.push(nbr);
                }
            }
        }
        
    }
  public:
    vector<int> topoSort(int n, vector<vector<int>>& edges) {
        vector<int> adj[n];
        
        for(auto e:edges){
            int u = e[0];
            int v = e[1];
            
            adj[u].push_back(v);
        }
        
        vector<int> ans;
        toposortBFS(n,ans,adj);
        return ans;
        
    }
};
