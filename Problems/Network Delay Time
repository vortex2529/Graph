class Solution {
  public:
    int findDelayTime(int V, vector<vector<int>> &edges, int src) {
        vector<pair<int,int>> adj[V];
        
        for(auto e:edges){
            adj[e[0]].push_back({e[1],e[2]});
        }
        
        vector<int> dist(V,1e9);
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        
        pq.push({0,src});
        dist[src] = 0;
        
        while(!pq.empty()){
            int node = pq.top().second;
            int dis = pq.top().first;
            pq.pop();
            
            for(auto it:adj[node]){
                int nbr = it.first;
                int wt = it.second;
                
                if(dis + wt < dist[nbr]){
                    dist[nbr] = dis+wt;
                    pq.push({dis+wt,nbr});
                }
            }
        }
        
        int time = INT_MIN;
        for(auto i:dist){
            time = max(time,i);
            if(i==1e9) return -1;
        }
        
        return time;
        
        
        
        
    }
};
