class Solution {
  public:
    bool hasCycle(int src,vector<bool>&vis,vector<int> adj[],int parent){
        vis[src] = true;
        for(auto nbr:adj[src]){
            if(!vis[nbr]){
                bool ans = hasCycle(nbr,vis,adj,src);
                if(ans == true){
                    return true;
                }
            }
            else{
                if(nbr != parent){
                    return true;
                }
            }
        }
        return false;
    }
    bool isCycle(int n, vector<vector<int>>& edges) {
    
        vector<int> adj[n];


        for(auto e:edges){
            int u = e[0];
            int v = e[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        bool ans = false;
        vector<bool> vis(n,false);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                ans = hasCycle(i,vis,adj,-1);
                if(ans==true) break;
            }
        }
        return ans;
        
    }
};
