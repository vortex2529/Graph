class DSU{
public:
    vector<int> size,parent;
    DSU(int n){
        size.resize(n+1);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
            size[i] = 1;
        }
    }

    int find(int node){
        if(node == parent[node]){
            return node;
        }
        return parent[node] = find(parent[node]);
    }    

    void unionBySize(int u,int v){
        int pu = find(u);
        int pv = find(v);

        if(pu == pv) return;

        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pv] += size[pu];
        }
        else{
            parent[pv] = pu;
            size[pu] += size[pv];

        }
    }
};
class Solution {
private:
    bool isvalid(int nr,int nc,int n){
        return nr>=0 && nr<n && nc>=0 && nc<n;
    }    
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
       
        int dr[] = {-1,0,1,0};
        int dc[] = {0,1,0,-1};

        DSU ds(n*n);

        vector<array<int,3>> cells;
        for(int row=0;row<n;row++){
            for(int col=0;col<n;col++){
                cells.push_back({grid[row][col],row,col});
            }
        }

        sort(cells.begin(),cells.end());
        vector<vector<bool>> active(n,vector<bool> (n,false));

        for(auto cell:cells){
            int h=cell[0],r=cell[1],c=cell[2];
            active[r][c] = true;
            for(int i=0;i<4;i++){
                int nr = r+dr[i];
                int nc = c+dc[i];

                if(isvalid(nr,nc,n) && active[nr][nc]){
                    int node = r*n+c;
                    int adjNode = nr*n+nc;
                    ds.unionBySize(node,adjNode);
                }
        
            }

            if(ds.find(0) == ds.find(((n-1)*n)+n-1)){
                return h;
            }

        }

        return -1;
        

    }
};
