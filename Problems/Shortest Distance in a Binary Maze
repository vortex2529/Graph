// User function Template for C++

class Solution {
#define P pair<int,pair<int,int>>


  public:
    int shortestPath(vector<vector<int>> &grid, pair<int, int> s,
                     pair<int, int> d) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>dist (n,vector<int>(m,1e9));
        
        queue<P> q;
        dist[s.first][s.second] = 0;
        q.push({0,s});
        
        int dx[] = {-1,0,1,0};
        int dy[] = {0,1,0,-1};
        
        if(s.first == d.first && s.second==d.second) return 0;
        
        while(!q.empty()){
            auto top = q.front();
            int dis = top.first;
            int x = top.second.first;
            int y = top.second.second;
            q.pop();
            
            for(int i=0;i<4;i++){
                int nx = x + dx[i];
                int ny = y + dy[i];
                
                if(nx >=0 && nx <n && ny>=0 && ny <m && dis+1 < dist[nx][ny] && grid[nx][ny]==1){
                    dist[nx][ny] = dis+1 ;
                    if(nx == d.first && ny == d.second) return dis+1;
                    q.push({dis+1,{nx,ny}});
                }
            }
        }
        
        
        return -1;
        
        
        
        
        
    }
};
