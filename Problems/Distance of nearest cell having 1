class Solution {
  public:
    // Function to find distance of nearest 1 in the grid for each cell.
    vector<vector<int>> nearest(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        vector<vector<int>> vis(n,vector<int> (m,0));
        vector<vector<int>> dist(n,vector<int> (m,0));
        queue<pair<pair<int,int>,int>>q;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j] == 1){
                    q.push({{i,j},0});
                    vis[i][j] = 1;
                }
                else{
                    vis[i][j] = 0;
                }
            }
        }
        int dr[] = {-1,0,1,0};
        int dc[] = {0,1,0,-1};
        while(!q.empty()){
            auto front = q.front();
            q.pop();
            int r = front.first.first;
            int c = front.first.second;
            int steps = front.second;

            dist[r][c] = steps;

            for(int i=0;i<4;i++){
                int nrow = r + dr[i];
                int ncol = c + dc[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol < m && vis[nrow][ncol] != 1){
                    q.push({{nrow,ncol},steps+1});
                    vis[nrow][ncol] = 1;
                }

            }

        }

        return dist;
        
    }
};
