class Solution {
#define ll long long    
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int,int>> adj[n];
        int MOD = 1e9+7; 
        
        for(auto &e:roads){
            adj[e[0]].push_back({e[1], e[2]});
            adj[e[1]].push_back({e[0], e[2]});
        }
        
        vector<ll> dist(n, 1e18), ways(n, 0);
        priority_queue<pair<ll,int>, vector<pair<ll,int>>, greater<pair<ll,int>>> pq;
        
        dist[0] = 0;
        ways[0] = 1;
        pq.push({0, 0});
        
        while(!pq.empty()){
            ll dis = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            
            
            for(auto &it: adj[node]){
                int nbr = it.first;
                ll wt = it.second;
                
                if(dis + wt < dist[nbr]){
                    dist[nbr] = dis + wt;
                    pq.push({dist[nbr], nbr});
                    ways[nbr] = ways[node];
                }
                else if(dis + wt == dist[nbr]){
                    ways[nbr] = (ways[nbr] + ways[node]) % MOD;
                }
            }
        }
        
        return ways[n-1] % MOD;
    }
};
