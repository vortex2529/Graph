class Solution {
private:
    int timer = 1;

    void dfs(int node,int parent,vector<int> &vis,vector<int> adj[],vector<int> &tin,vector<int>&low,vector<vector<int>> &bridges){
        vis[node] = 1;
        tin[node] = low[node] = timer;
        timer++;
        for(auto nbr:adj[node]){
            if(nbr == parent) continue;
            if(vis[nbr] == 0){
                dfs(nbr,node,vis,adj,tin,low,bridges);
                low[node] = min(low[node],low[nbr]);

                // check for bridge
                if(low[nbr] > tin[node]){
                    bridges.push_back({nbr,node});
                } 
            }
            else{
                low[node] = min(low[node],low[nbr]);
            }
        }
    }    
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {

        // T.C = O(V+2E), S.C = O(V+2E) + O(3N)
        vector<int> adj[n];

        for(auto it:connections){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        vector<int> tin(n);
        vector<int> low(n);
        vector<int> vis(n,0);
        vector<vector<int>> bridges;
        dfs(0,-1,vis,adj,tin,low,bridges);

        return bridges;
        
    }
};
