#include <iostream>
#include <unordered_map>
#include <list>
using namespace std;

class Graph{
    public:
    unordered_map<int,list<pair<int,int>>> adjList;
    
    void addEdge(int u,int v,int wt,bool direction){
        adjList[u].push_back({v,wt});
        if(direction == 0){
          adjList[v].push_back({u,wt});
        }
    }

    void printAdjList(){
      cout<<"Printing Adjacency List With Weight: "<<endl;
      for(auto node:adjList){
        cout<<node.first<<"->";
        for(auto nbr:node.second){
          cout<<"("<<nbr.first<<","<<nbr.second<<")"<<",";
        }
        cout<<endl;
      }
    }
};

int main() {
  
  cout<< "In case of undirected graph"<<endl; 
  Graph g;
  g.addEdge(0,1,5,0);
  g.addEdge(1,2,8,0);
  g.addEdge(0,2,6,0);

  g.printAdjList();

  cout<<"In case of directed graph"<<endl; 
  Graph g1;
  g1.addEdge(0,1,5,1);
  g1.addEdge(1,2,8,1);
  g1.addEdge(0,2,6,1);

  g1.printAdjList();


  

  return 0;

}
